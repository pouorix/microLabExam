;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.14 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 7/10/2020
;Author  : Alireza Azizi
;Company :
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <alcd.h>
;#include <stdio.h>
;#include <delay.h>
;void main(void)
; 0000 001D {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 001E // Declare your local variables here
; 0000 001F char input;
; 0000 0020 
; 0000 0021 // USART initialization
; 0000 0022 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0023 // USART Receiver: On
; 0000 0024 // USART Transmitter: On
; 0000 0025 // USART Mode: Asynchronous
; 0000 0026 // USART Baud Rate: 9600
; 0000 0027 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;	input -> R17
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0028 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0029 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 002A UBRRH=0x00;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 002B UBRRL=0x33;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 002C 
; 0000 002D // Analog Comparator initialization
; 0000 002E // Analog Comparator: Off
; 0000 002F // The Analog Comparator's positive input is
; 0000 0030 // connected to the AIN0 pin
; 0000 0031 // The Analog Comparator's negative input is
; 0000 0032 // connected to the AIN1 pin
; 0000 0033 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0034 SFIOR=(0<<ACME);
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0035 
; 0000 0036 // ADC initialization
; 0000 0037 // ADC disabled
; 0000 0038 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0039 
; 0000 003A // SPI initialization
; 0000 003B // SPI disabled
; 0000 003C SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 003D 
; 0000 003E // TWI initialization
; 0000 003F // TWI disabled
; 0000 0040 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0041 
; 0000 0042 // Alphanumeric LCD initialization
; 0000 0043 // Connections are specified in the
; 0000 0044 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 0045 // RS - PORTC Bit 0
; 0000 0046 // RD - PORTC Bit 1
; 0000 0047 // EN - PORTC Bit 2
; 0000 0048 // D4 - PORTC Bit 4
; 0000 0049 // D5 - PORTC Bit 5
; 0000 004A // D6 - PORTC Bit 6
; 0000 004B // D7 - PORTC Bit 7
; 0000 004C // Characters/line: 16
; 0000 004D lcd_init(16);
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 004E 
; 0000 004F while (1)
;PCODE: $00000024 VOL: 0
; 0000 0050       {
; 0000 0051           int i;
; 0000 0052           input = getchar();
;PCODE: $00000025 VOL: 0
;	i -> Y+0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0053           putchar(input);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0054           switch(input){
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0055             case 'C':
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0056                 lcd_clear();
;PCODE: $0000002E VOL: 0
; 0000 0057                 break;
;PCODE: $0000002F VOL: 0
; 0000 0058             case 'N':
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0059                 putchar(0x0a);
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 005A                 putchar(0x0d);
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 005B                 puts("Alireza Azizi");
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 005C                 putchar(0x0a);
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 005D                 putchar(0x0d);
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 005E                 break;
;PCODE: $0000003E VOL: 0
; 0000 005F             case 'c':
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0060                 for(i=0;i<24;i++)
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0061                 {
; 0000 0062                     putchar(0x0a);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0063                     putchar(0x0d);
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0064                 }
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0065                 break;
;PCODE: $00000056 VOL: 0
; 0000 0066             case 'M':
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0067                 lcd_clear();
;PCODE: $0000005A VOL: 0
; 0000 0068                 lcd_puts("Alireza Azizi");
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0069                 break;
;PCODE: $0000005E VOL: 0
; 0000 006A           }
;PCODE: $0000005F VOL: 0
; 0000 006B       }
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 006C }
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0

	.DSEG
_0xB:
	.BYTE 0x1C
