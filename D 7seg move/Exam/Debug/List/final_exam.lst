
AVRASM ver. 2.1.30  D:\CodeVisionAVR Projects\Exam\Debug\List\final_exam.asm Sat Jan 02 16:28:13 2021

D:\CodeVisionAVR Projects\Exam\Debug\List\final_exam.asm(1088): warning: Register r5 already defined by the .DEF directive
D:\CodeVisionAVR Projects\Exam\Debug\List\final_exam.asm(1089): warning: Register r6 already defined by the .DEF directive
D:\CodeVisionAVR Projects\Exam\Debug\List\final_exam.asm(1090): warning: Register r7 already defined by the .DEF directive
D:\CodeVisionAVR Projects\Exam\Debug\List\final_exam.asm(1091): warning: Register r8 already defined by the .DEF directive
D:\CodeVisionAVR Projects\Exam\Debug\List\final_exam.asm(1092): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _a=R5
                 	.DEF _counter=R6
                 	.DEF _counter_msb=R7
                 	.DEF _show_flag=R8
                 	.DEF _show_flag_msb=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0039 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 
                 __GLOBAL_INI_TBL:
000035 0004      	.DW  0x04
000036 0006      	.DW  0x06
000037 0066      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
000038 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000039 94f8      	CLI
00003a 27ee      	CLR  R30
00003b bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003c e0f1      	LDI  R31,1
00003d bffb      	OUT  GICR,R31
00003e bfeb      	OUT  GICR,R30
00003f bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000040 e08d      	LDI  R24,(14-2)+1
000041 e0a2      	LDI  R26,2
000042 27bb      	CLR  R27
                 __CLEAR_REG:
000043 93ed      	ST   X+,R30
000044 958a      	DEC  R24
000045 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000046 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000047 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000048 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000049 93ed      	ST   X+,R30
00004a 9701      	SBIW R24,1
00004b f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004c e6ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004d e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00004e 9185      	LPM  R24,Z+
00004f 9195      	LPM  R25,Z+
000050 9700      	SBIW R24,0
000051 f061      	BREQ __GLOBAL_INI_END
000052 91a5      	LPM  R26,Z+
000053 91b5      	LPM  R27,Z+
000054 9005      	LPM  R0,Z+
000055 9015      	LPM  R1,Z+
000056 01bf      	MOVW R22,R30
000057 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000058 9005      	LPM  R0,Z+
000059 920d      	ST   X+,R0
00005a 9701      	SBIW R24,1
00005b f7e1      	BRNE __GLOBAL_INI_LOOP
00005c 01fb      	MOVW R30,R22
00005d cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00005e e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00005f bfed      	OUT  SPL,R30
000060 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000061 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000062 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000063 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000064 940c 00d9 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*
                 ;Danial Bazmandeh
                 ;97521135
                 ;*/
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;
                 ;
                 ;void usart_send_string(char *str);
                 ;    // Declare your global variables here
                 ;    char a;
                 ;    int counter = 0;
                 ;    int show_flag = 0;
                 ;    char nums[6];
                 ;
                 ;    void delay() {
                 ; 0000 0012 void delay() {
                 
                 	.CSEG
                 ; 0000 0013         TCCR0 = (1 << CS02) | (1 << CS00);
                 ; 0000 0014         TCNT0 = 251;
                 ; 0000 0015         while ((TIFR & (1 << TOV0)) == 0);
                 ; 0000 0016         TIFR = (1 << TOV0);
                 ; 0000 0017     }
                 ;
                 ;unsigned char number (unsigned char digit) {
                 ; 0000 0019 unsigned char number (unsigned char digit) {
                 _number:
                 ; .FSTART _number
                 ; 0000 001A     if (digit == 0) {
000066 93aa      	ST   -Y,R26
                 ;	digit -> Y+0
000067 81e8      	LD   R30,Y
000068 30e0      	CPI  R30,0
000069 f411      	BRNE _0x6
                 ; 0000 001B         return 0x3F;
00006a e3ef      	LDI  R30,LOW(63)
00006b c06b      	RJMP _0x2060001
                 ; 0000 001C     }
                 ; 0000 001D     if (digit == 1) {
                 _0x6:
00006c 81a8      	LD   R26,Y
00006d 30a1      	CPI  R26,LOW(0x1)
00006e f411      	BRNE _0x7
                 ; 0000 001E         return 0x06;
00006f e0e6      	LDI  R30,LOW(6)
000070 c066      	RJMP _0x2060001
                 ; 0000 001F     }
                 ; 0000 0020     if (digit == 2) {
                 _0x7:
000071 81a8      	LD   R26,Y
000072 30a2      	CPI  R26,LOW(0x2)
000073 f411      	BRNE _0x8
                 ; 0000 0021         return 0x5B;
000074 e5eb      	LDI  R30,LOW(91)
000075 c061      	RJMP _0x2060001
                 ; 0000 0022     }
                 ; 0000 0023     if (digit == 3) {
                 _0x8:
000076 81a8      	LD   R26,Y
000077 30a3      	CPI  R26,LOW(0x3)
000078 f411      	BRNE _0x9
                 ; 0000 0024         return 0x4F;
000079 e4ef      	LDI  R30,LOW(79)
00007a c05c      	RJMP _0x2060001
                 ; 0000 0025     }
                 ; 0000 0026     if (digit == 4) {
                 _0x9:
00007b 81a8      	LD   R26,Y
00007c 30a4      	CPI  R26,LOW(0x4)
00007d f411      	BRNE _0xA
                 ; 0000 0027         return 0x66;
00007e e6e6      	LDI  R30,LOW(102)
00007f c057      	RJMP _0x2060001
                 ; 0000 0028     }
                 ; 0000 0029     if (digit == 5) {
                 _0xA:
000080 81a8      	LD   R26,Y
000081 30a5      	CPI  R26,LOW(0x5)
000082 f411      	BRNE _0xB
                 ; 0000 002A         return 0x6D;
000083 e6ed      	LDI  R30,LOW(109)
000084 c052      	RJMP _0x2060001
                 ; 0000 002B     }
                 ; 0000 002C     if (digit == 6) {
                 _0xB:
000085 81a8      	LD   R26,Y
000086 30a6      	CPI  R26,LOW(0x6)
000087 f411      	BRNE _0xC
                 ; 0000 002D         return 0x7D;
000088 e7ed      	LDI  R30,LOW(125)
000089 c04d      	RJMP _0x2060001
                 ; 0000 002E     }
                 ; 0000 002F     if (digit == 7) {
                 _0xC:
00008a 81a8      	LD   R26,Y
00008b 30a7      	CPI  R26,LOW(0x7)
00008c f411      	BRNE _0xD
                 ; 0000 0030         return 0x07;
00008d e0e7      	LDI  R30,LOW(7)
00008e c048      	RJMP _0x2060001
                 ; 0000 0031     }
                 ; 0000 0032     if (digit == 8) {
                 _0xD:
00008f 81a8      	LD   R26,Y
000090 30a8      	CPI  R26,LOW(0x8)
000091 f411      	BRNE _0xE
                 ; 0000 0033         return 0x7F;
000092 e7ef      	LDI  R30,LOW(127)
000093 c043      	RJMP _0x2060001
                 ; 0000 0034     }
                 ; 0000 0035     if (digit == 9) {
                 _0xE:
000094 81a8      	LD   R26,Y
000095 30a9      	CPI  R26,LOW(0x9)
000096 f411      	BRNE _0xF
                 ; 0000 0036         return 0x6F;
000097 e6ef      	LDI  R30,LOW(111)
000098 c03e      	RJMP _0x2060001
                 ; 0000 0037     }
                 ; 0000 0038 }
                 _0xF:
000099 c03d      	RJMP _0x2060001
                 ; .FEND
                 ;
                 ;void set_number(char c){
                 ; 0000 003A void set_number(char c){
                 _set_number:
                 ; .FSTART _set_number
                 ; 0000 003B     if (c == '0'){
00009a 93aa      	ST   -Y,R26
                 ;	c -> Y+0
00009b 81a8      	LD   R26,Y
00009c 33a0      	CPI  R26,LOW(0x30)
00009d f419      	BRNE _0x10
                 ; 0000 003C         PORTC = number(0);
00009e e0a0      	LDI  R26,LOW(0)
00009f dfc6      	RCALL _number
0000a0 bbe5      	OUT  0x15,R30
                 ; 0000 003D     }
                 ; 0000 003E     if (c == '1'){
                 _0x10:
0000a1 81a8      	LD   R26,Y
0000a2 33a1      	CPI  R26,LOW(0x31)
0000a3 f419      	BRNE _0x11
                 ; 0000 003F         PORTC = number(1);
0000a4 e0a1      	LDI  R26,LOW(1)
0000a5 dfc0      	RCALL _number
0000a6 bbe5      	OUT  0x15,R30
                 ; 0000 0040     }
                 ; 0000 0041     if (c == '2'){
                 _0x11:
0000a7 81a8      	LD   R26,Y
0000a8 33a2      	CPI  R26,LOW(0x32)
0000a9 f419      	BRNE _0x12
                 ; 0000 0042         PORTC = number(2);
0000aa e0a2      	LDI  R26,LOW(2)
0000ab dfba      	RCALL _number
0000ac bbe5      	OUT  0x15,R30
                 ; 0000 0043     }
                 ; 0000 0044     if (c == '3'){
                 _0x12:
0000ad 81a8      	LD   R26,Y
0000ae 33a3      	CPI  R26,LOW(0x33)
0000af f419      	BRNE _0x13
                 ; 0000 0045         PORTC = number(3);
0000b0 e0a3      	LDI  R26,LOW(3)
0000b1 dfb4      	RCALL _number
0000b2 bbe5      	OUT  0x15,R30
                 ; 0000 0046     }
                 ; 0000 0047     if (c == '4'){
                 _0x13:
0000b3 81a8      	LD   R26,Y
0000b4 33a4      	CPI  R26,LOW(0x34)
0000b5 f419      	BRNE _0x14
                 ; 0000 0048         PORTC = number(4);
0000b6 e0a4      	LDI  R26,LOW(4)
0000b7 dfae      	RCALL _number
0000b8 bbe5      	OUT  0x15,R30
                 ; 0000 0049     }
                 ; 0000 004A     if (c == '5'){
                 _0x14:
0000b9 81a8      	LD   R26,Y
0000ba 33a5      	CPI  R26,LOW(0x35)
0000bb f419      	BRNE _0x15
                 ; 0000 004B         PORTC = number(5);
0000bc e0a5      	LDI  R26,LOW(5)
0000bd dfa8      	RCALL _number
0000be bbe5      	OUT  0x15,R30
                 ; 0000 004C     }
                 ; 0000 004D     if (c == '6'){
                 _0x15:
0000bf 81a8      	LD   R26,Y
0000c0 33a6      	CPI  R26,LOW(0x36)
0000c1 f419      	BRNE _0x16
                 ; 0000 004E         PORTC = number(6);
0000c2 e0a6      	LDI  R26,LOW(6)
0000c3 dfa2      	RCALL _number
0000c4 bbe5      	OUT  0x15,R30
                 ; 0000 004F     }
                 ; 0000 0050     if (c == '7'){
                 _0x16:
0000c5 81a8      	LD   R26,Y
0000c6 33a7      	CPI  R26,LOW(0x37)
0000c7 f419      	BRNE _0x17
                 ; 0000 0051         PORTC = number(7);
0000c8 e0a7      	LDI  R26,LOW(7)
0000c9 df9c      	RCALL _number
0000ca bbe5      	OUT  0x15,R30
                 ; 0000 0052     }
                 ; 0000 0053     if (c == '8'){
                 _0x17:
0000cb 81a8      	LD   R26,Y
0000cc 33a8      	CPI  R26,LOW(0x38)
0000cd f419      	BRNE _0x18
                 ; 0000 0054         PORTC = number(8);
0000ce e0a8      	LDI  R26,LOW(8)
0000cf df96      	RCALL _number
0000d0 bbe5      	OUT  0x15,R30
                 ; 0000 0055     }
                 ; 0000 0056     if (c == '9'){
                 _0x18:
0000d1 81a8      	LD   R26,Y
0000d2 33a9      	CPI  R26,LOW(0x39)
0000d3 f419      	BRNE _0x19
                 ; 0000 0057         PORTC = number(9);
0000d4 e0a9      	LDI  R26,LOW(9)
0000d5 df90      	RCALL _number
0000d6 bbe5      	OUT  0x15,R30
                 ; 0000 0058     }
                 ; 0000 0059 }
                 _0x19:
                 _0x2060001:
0000d7 9621      	ADIW R28,1
0000d8 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void) {
                 ; 0000 005B void main(void) {
                 _main:
                 ; .FSTART _main
                 ; 0000 005C     // Declare your local variables here
                 ; 0000 005D 
                 ; 0000 005E     // Input/Output Ports initialization
                 ; 0000 005F     // Port A initialization
                 ; 0000 0060     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0061     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0062     PORTA = 0x00;
0000d9 e0e0      	LDI  R30,LOW(0)
0000da bbeb      	OUT  0x1B,R30
                 ; 0000 0063     DDRA = 0x00;
0000db bbea      	OUT  0x1A,R30
                 ; 0000 0064 
                 ; 0000 0065     // Port B initialization
                 ; 0000 0066     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0067     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0068     PORTB = 0x0ff;
0000dc efef      	LDI  R30,LOW(255)
0000dd bbe8      	OUT  0x18,R30
                 ; 0000 0069     DDRB = 0xff;
0000de bbe7      	OUT  0x17,R30
                 ; 0000 006A 
                 ; 0000 006B     // Port C initialization
                 ; 0000 006C     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 006D     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 006E     PORTC = 0xFF;
0000df bbe5      	OUT  0x15,R30
                 ; 0000 006F     DDRC = 0xFF;
0000e0 bbe4      	OUT  0x14,R30
                 ; 0000 0070 
                 ; 0000 0071     // Port D initialization
                 ; 0000 0072     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0073     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0074     PORTD = 0x00;
0000e1 e0e0      	LDI  R30,LOW(0)
0000e2 bbe2      	OUT  0x12,R30
                 ; 0000 0075     DDRD = 0x00;
0000e3 bbe1      	OUT  0x11,R30
                 ; 0000 0076 
                 ; 0000 0077     // Timer/Counter 0 initialization
                 ; 0000 0078     // Clock source: System Clock
                 ; 0000 0079     // Clock value: Timer 0 Stopped
                 ; 0000 007A     // Mode: Normal top=0xFF
                 ; 0000 007B     // OC0 output: Disconnected
                 ; 0000 007C     TCCR0 = 0x00;
0000e4 bfe3      	OUT  0x33,R30
                 ; 0000 007D     TCNT0 = 0x00;
0000e5 bfe2      	OUT  0x32,R30
                 ; 0000 007E     OCR0 = 0x00;
0000e6 bfec      	OUT  0x3C,R30
                 ; 0000 007F 
                 ; 0000 0080     // Timer/Counter 1 initialization
                 ; 0000 0081     // Clock source: System Clock
                 ; 0000 0082     // Clock value: Timer1 Stopped
                 ; 0000 0083     // Mode: Normal top=0xFFFF
                 ; 0000 0084     // OC1A output: Discon.
                 ; 0000 0085     // OC1B output: Discon.
                 ; 0000 0086     // Noise Canceler: Off
                 ; 0000 0087     // Input Capture on Falling Edge
                 ; 0000 0088     // Timer1 Overflow Interrupt: Off
                 ; 0000 0089     // Input Capture Interrupt: Off
                 ; 0000 008A     // Compare A Match Interrupt: Off
                 ; 0000 008B     // Compare B Match Interrupt: Off
                 ; 0000 008C     TCCR1A = 0x00;
0000e7 bdef      	OUT  0x2F,R30
                 ; 0000 008D     TCCR1B = 0x00;
0000e8 bdee      	OUT  0x2E,R30
                 ; 0000 008E     TCNT1H = 0x00;
0000e9 bded      	OUT  0x2D,R30
                 ; 0000 008F     TCNT1L = 0x00;
0000ea bdec      	OUT  0x2C,R30
                 ; 0000 0090     ICR1H = 0x00;
0000eb bde7      	OUT  0x27,R30
                 ; 0000 0091     ICR1L = 0x00;
0000ec bde6      	OUT  0x26,R30
                 ; 0000 0092     OCR1AH = 0x00;
0000ed bdeb      	OUT  0x2B,R30
                 ; 0000 0093     OCR1AL = 0x00;
0000ee bdea      	OUT  0x2A,R30
                 ; 0000 0094     OCR1BH = 0x00;
0000ef bde9      	OUT  0x29,R30
                 ; 0000 0095     OCR1BL = 0x00;
0000f0 bde8      	OUT  0x28,R30
                 ; 0000 0096 
                 ; 0000 0097     // Timer/Counter 2 initialization
                 ; 0000 0098     // Clock source: System Clock
                 ; 0000 0099     // Clock value: Timer2 Stopped
                 ; 0000 009A     // Mode: Normal top=0xFF
                 ; 0000 009B     // OC2 output: Disconnected
                 ; 0000 009C     ASSR = 0x00;
0000f1 bde2      	OUT  0x22,R30
                 ; 0000 009D     TCCR2 = 0x00;
0000f2 bde5      	OUT  0x25,R30
                 ; 0000 009E     TCNT2 = 0x00;
0000f3 bde4      	OUT  0x24,R30
                 ; 0000 009F     OCR2 = 0x00;
0000f4 bde3      	OUT  0x23,R30
                 ; 0000 00A0 
                 ; 0000 00A1     // External Interrupt(s) initialization
                 ; 0000 00A2     // INT0: Off
                 ; 0000 00A3     // INT1: Off
                 ; 0000 00A4     // INT2: Off
                 ; 0000 00A5     MCUCR = 0x00;
0000f5 bfe5      	OUT  0x35,R30
                 ; 0000 00A6     MCUCSR = 0x00;
0000f6 bfe4      	OUT  0x34,R30
                 ; 0000 00A7 
                 ; 0000 00A8     // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00A9     TIMSK = 0x00;
0000f7 bfe9      	OUT  0x39,R30
                 ; 0000 00AA 
                 ; 0000 00AB     // USART initialization
                 ; 0000 00AC     // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 00AD     // USART Receiver: On
                 ; 0000 00AE     // USART Transmitter: On
                 ; 0000 00AF     // USART Mode: Asynchronous
                 ; 0000 00B0     // USART Baud Rate: 9600
                 ; 0000 00B1     UCSRA = 0x00;
0000f8 b9eb      	OUT  0xB,R30
                 ; 0000 00B2     UCSRB = 0x18;
0000f9 e1e8      	LDI  R30,LOW(24)
0000fa b9ea      	OUT  0xA,R30
                 ; 0000 00B3     UCSRC = 0x86;
0000fb e8e6      	LDI  R30,LOW(134)
0000fc bde0      	OUT  0x20,R30
                 ; 0000 00B4     UBRRH = 0x00;
0000fd e0e0      	LDI  R30,LOW(0)
0000fe bde0      	OUT  0x20,R30
                 ; 0000 00B5     UBRRL = 0x33;
0000ff e3e3      	LDI  R30,LOW(51)
000100 b9e9      	OUT  0x9,R30
                 ; 0000 00B6 
                 ; 0000 00B7     // Analog Comparator initialization
                 ; 0000 00B8     // Analog Comparator: Off
                 ; 0000 00B9     // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 00BA     ACSR = 0x80;
000101 e8e0      	LDI  R30,LOW(128)
000102 b9e8      	OUT  0x8,R30
                 ; 0000 00BB     SFIOR = 0x00;
000103 e0e0      	LDI  R30,LOW(0)
000104 bfe0      	OUT  0x30,R30
                 ; 0000 00BC 
                 ; 0000 00BD     // ADC initialization
                 ; 0000 00BE     // ADC disabled
                 ; 0000 00BF     ADCSRA = 0x00;
000105 b9e6      	OUT  0x6,R30
                 ; 0000 00C0 
                 ; 0000 00C1     // SPI initialization
                 ; 0000 00C2     // SPI disabled
                 ; 0000 00C3     SPCR = 0x00;
000106 b9ed      	OUT  0xD,R30
                 ; 0000 00C4 
                 ; 0000 00C5     // TWI initialization
                 ; 0000 00C6     // TWI disabled
                 ; 0000 00C7     TWCR = 0x00;
000107 bfe6      	OUT  0x36,R30
                 ; 0000 00C8 
                 ; 0000 00C9     // Alphanumeric LCD initialization
                 ; 0000 00CA     // Connections are specified in the
                 ; 0000 00CB     // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00CC     // RS - PORTC Bit 0
                 ; 0000 00CD     // RD - PORTC Bit 1
                 ; 0000 00CE     // EN - PORTC Bit 2
                 ; 0000 00CF     // D4 - PORTC Bit 4
                 ; 0000 00D0     // D5 - PORTC Bit 5
                 ; 0000 00D1     // D6 - PORTC Bit 6
                 ; 0000 00D2     // D7 - PORTC Bit 7
                 ; 0000 00D3     while (1) {
                 _0x1A:
                 ; 0000 00D4         a = getchar();
000108 d04c      	RCALL _getchar
000109 2e5e      	MOV  R5,R30
                 ; 0000 00D5 
                 ; 0000 00D6         nums[counter] = a;
00010a 01f3      	MOVW R30,R6
00010b 5ae0      	SUBI R30,LOW(-_nums)
00010c 4ffd      	SBCI R31,HIGH(-_nums)
00010d 8250      	ST   Z,R5
                 ; 0000 00D7         if (counter == 6){
00010e e0e6      	LDI  R30,LOW(6)
00010f e0f0      	LDI  R31,HIGH(6)
000110 15e6      	CP   R30,R6
000111 05f7      	CPC  R31,R7
000112 f411      	BRNE _0x1D
                 ; 0000 00D8             counter = 0;
000113 2466      	CLR  R6
000114 2477      	CLR  R7
                 ; 0000 00D9         }
                 ; 0000 00DA         counter++;
                 _0x1D:
000115 01f3      	MOVW R30,R6
000116 9631      	ADIW R30,1
000117 013f      	MOVW R6,R30
                 ; 0000 00DB 
                 ; 0000 00DC         if (counter > 0) {
000118 2400      	CLR  R0
000119 1406      	CP   R0,R6
00011a 0407      	CPC  R0,R7
00011b f42c      	BRGE _0x1E
                 ; 0000 00DD             PORTB = 0b10111111;
00011c ebef      	LDI  R30,LOW(191)
00011d bbe8      	OUT  0x18,R30
                 ; 0000 00DE             set_number(nums[0]);
00011e 91a0 0260 	LDS  R26,_nums
000120 df79      	RCALL _set_number
                 ; 0000 00DF         }
                 ; 0000 00E0 
                 ; 0000 00E1         if (counter > 1) {
                 _0x1E:
000121 e0e1      	LDI  R30,LOW(1)
000122 e0f0      	LDI  R31,HIGH(1)
000123 15e6      	CP   R30,R6
000124 05f7      	CPC  R31,R7
000125 f42c      	BRGE _0x1F
                 ; 0000 00E2             PORTB = 0b11011111;
000126 edef      	LDI  R30,LOW(223)
000127 bbe8      	OUT  0x18,R30
                 ; 0000 00E3             set_number(nums[1]);
                +
000128 91a0 0261+LDS R26 , _nums + ( 1 )
                 	__GETB2MN _nums,1
00012a df6f      	RCALL _set_number
                 ; 0000 00E4         }
                 ; 0000 00E5 
                 ; 0000 00E6         if (counter > 2) {
                 _0x1F:
00012b e0e2      	LDI  R30,LOW(2)
00012c e0f0      	LDI  R31,HIGH(2)
00012d 15e6      	CP   R30,R6
00012e 05f7      	CPC  R31,R7
00012f f42c      	BRGE _0x20
                 ; 0000 00E7             PORTB = 0b11101111;
000130 eeef      	LDI  R30,LOW(239)
000131 bbe8      	OUT  0x18,R30
                 ; 0000 00E8             set_number(nums[2]);
                +
000132 91a0 0262+LDS R26 , _nums + ( 2 )
                 	__GETB2MN _nums,2
000134 df65      	RCALL _set_number
                 ; 0000 00E9         }
                 ; 0000 00EA 
                 ; 0000 00EB         if (counter > 3) {
                 _0x20:
000135 e0e3      	LDI  R30,LOW(3)
000136 e0f0      	LDI  R31,HIGH(3)
000137 15e6      	CP   R30,R6
000138 05f7      	CPC  R31,R7
000139 f42c      	BRGE _0x21
                 ; 0000 00EC             PORTB = 0b11110111;
00013a efe7      	LDI  R30,LOW(247)
00013b bbe8      	OUT  0x18,R30
                 ; 0000 00ED             set_number(nums[3]);
                +
00013c 91a0 0263+LDS R26 , _nums + ( 3 )
                 	__GETB2MN _nums,3
00013e df5b      	RCALL _set_number
                 ; 0000 00EE         }
                 ; 0000 00EF 
                 ; 0000 00F0         if (counter > 4) {
                 _0x21:
00013f e0e4      	LDI  R30,LOW(4)
000140 e0f0      	LDI  R31,HIGH(4)
000141 15e6      	CP   R30,R6
000142 05f7      	CPC  R31,R7
000143 f42c      	BRGE _0x22
                 ; 0000 00F1             PORTB = 0b11111011;
000144 efeb      	LDI  R30,LOW(251)
000145 bbe8      	OUT  0x18,R30
                 ; 0000 00F2             set_number(nums[4]);
                +
000146 91a0 0264+LDS R26 , _nums + ( 4 )
                 	__GETB2MN _nums,4
000148 df51      	RCALL _set_number
                 ; 0000 00F3         }
                 ; 0000 00F4 
                 ; 0000 00F5          if (counter > 5) {
                 _0x22:
000149 e0e5      	LDI  R30,LOW(5)
00014a e0f0      	LDI  R31,HIGH(5)
00014b 15e6      	CP   R30,R6
00014c 05f7      	CPC  R31,R7
00014d f42c      	BRGE _0x23
                 ; 0000 00F6             PORTB = 0b11111101;
00014e efed      	LDI  R30,LOW(253)
00014f bbe8      	OUT  0x18,R30
                 ; 0000 00F7             set_number(nums[5]);
                +
000150 91a0 0265+LDS R26 , _nums + ( 5 )
                 	__GETB2MN _nums,5
000152 df47      	RCALL _set_number
                 ; 0000 00F8         }
                 ; 0000 00F9     }
                 _0x23:
000153 cfb4      	RJMP _0x1A
                 ; 0000 00FA }
                 _0x24:
000154 cfff      	RJMP _0x24
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _getchar:
                 ; .FSTART _getchar
                 getchar0:
000155 9b5f           sbis usr,rxc
000156 cffe           rjmp getchar0
000157 b1ec           in   r30,udr
000158 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _nums:
000260           	.BYTE 0x6
                 
                 	.CSEG
                 
                 	.CSEG
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :   7 r1 :   1 r2 :   0 r3 :   0 r4 :   0 r5 :   2 r6 :  11 r7 :   8 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:   7 r25:   2 r26:  59 r27:   2 r28:   2 r29:   1 r30: 114 r31:  16 
x  :   3 y  :  22 z  :   8 
Registers used: 17 out of 35 (48.6%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   0 
adiw  :   2 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   1 
brge  :   6 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  24 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   5 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   7 cpc   :   7 cpi   :  20 cpse  :   0 dec   :   1 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   1 inc   :   0 jmp   :  22 ld    :  20 ldd   :   0 ldi   :  59 
lds   :   6 lpm   :   7 lsl   :   0 lsr   :   0 mov   :   1 movw  :   6 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   0 out   :  60 pop   :   0 push  :   0 rcall :  17 ret   :   2 
reti  :   0 rjmp  :  15 rol   :   0 ror   :   0 sbc   :   0 sbci  :   1 
sbi   :   0 sbic  :   0 sbis  :   1 sbiw  :   3 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :   6 std   :   0 sts   :   0 sub   :   0 subi  :   1 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 27 out of 116 (23.3%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0002b2    660     30    690   32768   2.1%
[.dseg] 0x000060 0x000266      0      6      6    2048   0.3%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 5 warnings
